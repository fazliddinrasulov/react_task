{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/ReactTask/src/components/Checkbox/Checkbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { cla } from \"../SweetTable/SweetTable\";\nimport { ReactComponent as CheckSvg } from \"../../assets/images/check.svg\";\nimport style from \"./Checkbox.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Checkbox = _ref => {\n  _s();\n  let {\n    id,\n    name,\n    type,\n    autoComplete,\n    label,\n    setFieldValue,\n    className,\n    classNameForBack,\n    value,\n    checked,\n    onFocus,\n    isLastIndex,\n    onBlur,\n    required,\n    error,\n    isOther\n  } = _ref;\n  const [valueOfTextOfOther, setValueOfTextOfOther] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const handleLocalChange = () => {\n    let newNewNew = undefined;\n    if (type === \"radio\") {\n      if (!isOther) {\n        newNewNew = value;\n      } else {\n        newNewNew = valueOfTextOfOther;\n      }\n    } else if (type === \"checkbox\") {\n      setIsOpen(!isOpen);\n    }\n    setFieldValue(name, newNewNew);\n  };\n  const handleLocalChangeForInputOfOther = e => {\n    const newVal = e.target.value;\n    setFieldValue(name, newVal);\n    setValueOfTextOfOther(newVal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cla(className, style.ground),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.inpWrap,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cla(style.radioCheckWrap, classNameForBack, style[type], {\n          [style.checked]: isOpen\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: id,\n          name: name,\n          autoComplete: autoComplete,\n          className: cla(style.myInput, style[type], {\n            [style.checked]: isOpen\n          }),\n          type: type,\n          required: required,\n          value: value,\n          checked: isOpen || false,\n          onChange: handleLocalChange,\n          onFocus: onFocus,\n          onBlur: onBlur\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CheckSvg, {\n          className: cla(style.checkSvg, {\n            [style.show]: type === \"checkbox\" && isOpen\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: cla(style.label, {\n          [style.isOther]: isOther\n        }),\n        htmlFor: id,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), isOther && /*#__PURE__*/_jsxDEV(\"input\", {\n        value: valueOfTextOfOther,\n        placeholder: \"Other\",\n        className: style.textInpOfOther,\n        onChange: handleLocalChangeForInputOfOther,\n        type: \"text\",\n        name: `otherFor_${name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), error && (type === \"checkbox\" || isLastIndex) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Checkbox, \"9c1JyBxijo5WbEQKehMCtXt7YXI=\");\n_c = Checkbox;\nvar _c;\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["React","useState","cla","ReactComponent","CheckSvg","style","Checkbox","id","name","type","autoComplete","label","setFieldValue","className","classNameForBack","value","checked","onFocus","isLastIndex","onBlur","required","error","isOther","valueOfTextOfOther","setValueOfTextOfOther","isOpen","setIsOpen","handleLocalChange","newNewNew","undefined","handleLocalChangeForInputOfOther","e","newVal","target","ground","inpWrap","radioCheckWrap","myInput","checkSvg","show","textInpOfOther"],"sources":["/Users/macbookpro/Desktop/ReactTask/src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { cla } from \"../SweetTable/SweetTable\";\n\nimport { ReactComponent as CheckSvg } from \"../../assets/images/check.svg\";\n\nimport style from \"./Checkbox.module.scss\";\n\nexport const Checkbox: React.FC<{\n  autoComplete?: string;\n  id: string;\n  name: string;\n  label: string;\n  type: \"radio\" | \"checkbox\";\n  className?: string;\n  classNameForBack?: string;\n  value: string | undefined;\n  checked: boolean | undefined;\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  isLastIndex?: boolean;\n\n  onBlur: React.FocusEventHandler<HTMLInputElement>;\n  required?: boolean;\n  error?: string | false;\n  setFieldValue: (\n    field: string,\n    value: any,\n    shouldValidate?: boolean | undefined\n  ) => any; // from Formik library\n  isOther?: boolean;\n}> = ({\n  id,\n  name,\n  type,\n  autoComplete,\n\n  label,\n  setFieldValue,\n  className,\n  classNameForBack,\n  value,\n  checked,\n  onFocus,\n  isLastIndex,\n\n  onBlur,\n  required,\n  error,\n  isOther,\n}) => {\n  const [valueOfTextOfOther, setValueOfTextOfOther] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleLocalChange: React.ChangeEventHandler<HTMLInputElement> = () => {\n    let newNewNew: string | boolean | undefined = undefined;\n    if (type === \"radio\") {\n      if (!isOther) {\n        newNewNew = value;\n      } else {\n        newNewNew = valueOfTextOfOther;\n      }\n    } else if (type === \"checkbox\") {\n      setIsOpen(!isOpen);\n    }\n\n    setFieldValue(name, newNewNew);\n  };\n\n  const handleLocalChangeForInputOfOther: React.ChangeEventHandler<\n    HTMLInputElement\n  > = (e) => {\n    const newVal = e.target.value;\n\n    setFieldValue(name, newVal);\n    setValueOfTextOfOther(newVal);\n  };\n\n  return (\n    <div className={cla(className, style.ground)}>\n      <div className={style.inpWrap}>\n        <div\n          className={cla(style.radioCheckWrap, classNameForBack, style[type], {\n            [style.checked]: isOpen,\n          })}\n        >\n          <input\n            id={id}\n            name={name}\n            autoComplete={autoComplete}\n            className={cla(style.myInput, style[type], {\n              [style.checked]: isOpen,\n            })}\n            type={type}\n            required={required}\n            value={value}\n            checked={isOpen || false}\n            onChange={handleLocalChange}\n            onFocus={onFocus}\n            onBlur={onBlur}\n          />\n          <CheckSvg\n            className={cla(style.checkSvg, {\n              [style.show]: type === \"checkbox\" && isOpen,\n            })}\n          />\n        </div>\n\n        <label\n          className={cla(style.label, { [style.isOther]: isOther })}\n          htmlFor={id}\n        >\n          {label}\n        </label>\n        {isOther && (\n          <input\n            value={valueOfTextOfOther}\n            placeholder=\"Other\"\n            className={style.textInpOfOther}\n            onChange={handleLocalChangeForInputOfOther}\n            type=\"text\"\n            name={`otherFor_${name}`}\n          />\n        )}\n      </div>\n      {error && (type === \"checkbox\" || isLastIndex) && (\n        <div className={style.error}>{error}</div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}